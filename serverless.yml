service: stokado

provider:
  name: aws
  stage: dev
  runtime: nodejs12.x
  region: eu-west-1
  memorySize: 128
  lambdaHashingVersion: 20201221
  environment:
    BUCKET_NAME: !Ref StorageBucket
    CDN_DISTRIBUTION_ID: ${self:resources.Outputs.CloudFrontDistributionId.Value}
    FORNO_URL: ${self:custom.envSpecificParams.fornoUrl}
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
        Resource:
          - Fn::Join:
              - ""
              - - !GetAtt StorageBucket.Arn
                - "/*"
      - Effect: Allow
        Action:
          - cloudfront:CreateInvalidation
        Resource:
          - Fn::Join:
            - "/"
            - - Fn::Join:
                - ":"
                - - "arn:aws:cloudfront:"
                  - !Ref "AWS::AccountId"
                  - distribution
              - !Ref CloudFrontDistribution

frameworkVersion: '2'

plugins:
  - serverless-plugin-aws-alerts
  - serverless-sqs-alarms-plugin
  - serverless-webpack
  - serverless-layers
  - serverless-domain-manager

package:
  individually: true
  excludeDevDependencies: false
  exclude:
    - "**/*"
    - node_modules/**

functions:
  authorize:
    memorySize: ${self:custom.parameters.authorize.memorySize}
    timeout: ${self:custom.parameters.authorize.timeout}
    handler: src/authorize/handler.handle
    events:
      - http:
          path: authorize
          method: POST
    environment:
      AUTHORIZATION_EXPIRES_IN: ${self:custom.parameters.authorize.authorizationExpiresIn}
    package:
      include:
        - src/authorize/**
  flush:
    memorySize: ${self:custom.parameters.flush.memorySize}
    timeout: ${self:custom.parameters.flush.timeout}
    handler: src/flush/handler.handle
    events:
      - sqs:
          arn: !GetAtt FileUpdatesQueue.Arn
          batchSize: ${self:custom.parameters.flush.batchSize}
          maximumBatchingWindow: ${self:custom.parameters.flush.batchingWindow}
    package:
      include:
        - src/flush/**
    alarms:
      - name: functionDuration
        threshold: ${self:custom.parameters.flush.expectedMaxAverageDuration}

resources:
  Resources:
    StorageBucket:
      Type: AWS::S3::Bucket
      DependsOn:
        - FileUpdatesQueuePolicy
      # Warning: when a stack gets removed, this bucket will NOT be removed as part of it,
      # so subsequent deployments of the same stack would fail, it has to be removed manually
      DeletionPolicy: Retain
      Metadata:
        Comment: 'Secure metadata storage'
      Properties:
        AccessControl: Private
        BucketName: ${self:custom.parameters.storageBucket.name}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - POST
                - GET
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
        NotificationConfiguration:
          QueueConfigurations:
            - Event: s3:ObjectCreated:*
              Queue: !GetAtt FileUpdatesQueue.Arn
            - Event: s3:ObjectRemoved:*
              Queue: !GetAtt FileUpdatesQueue.Arn
        Tags: ${self:custom.tags}

    StorageBucketAllowPublicReadPolicy:
      Type: AWS::S3::BucketPolicy
      Metadata:
        Comment: 'Bucket policy to allow CloudFront to access the data'
      Properties:
        Bucket: !Ref StorageBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: 'Allow'
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
              Resource:
                - !Sub 'arn:aws:s3:::${StorageBucket}/*'

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Metadata:
        Comment: 'Stokado service CloudFront distribution'
      Properties:
        DistributionConfig:
          Aliases:
            # we can't reuse the domain name used by API Gateway due to the limitation of edge-optimized endpoints
            - "${self:custom.stage}-${self:service}-data.${self:custom.envSpecificParams.baseHostname}"
          ViewerCertificate:
            AcmCertificateArn: # this specifies the ACM certificate for the custom CDN distribution domain
              Fn::Join:
                - ""
                - - "arn:aws:acm:us-east-1:" # must be created in us-east-1 zone to support edge endpoints
                  - !Ref "AWS::AccountId"
                  - ":certificate/"
                  - ${self:custom.envSpecificParams.certificateId}
            MinimumProtocolVersion: TLSv1
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            AllowedMethods:
              - 'HEAD'
              - 'GET'
            CachedMethods:
              - 'HEAD'
              - 'GET'
            Compress: false
            DefaultTTL: ${self:custom.parameters.cdn.cacheDefaultTtl}
            ForwardedValues:
              Cookies:
                Forward: 'none'
              Headers:
                - 'Origin'
              QueryString: false
            MaxTTL: ${self:custom.parameters.cdn.cacheMaxTtl}
            MinTTL: ${self:custom.parameters.cdn.cacheMinTtl}
            TargetOriginId: !Sub 's3-origin-${StorageBucket}'
            ViewerProtocolPolicy: 'redirect-to-https'
          DefaultRootObject: 'index.html'
          Enabled: true
          HttpVersion: 'http1.1'
          IPV6Enabled: false
          Origins:
            - DomainName: !GetAtt StorageBucket.DomainName
              Id: !Sub 's3-origin-${StorageBucket}'
              OriginPath: ''
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
          PriceClass: 'PriceClass_All'
        Tags: ${self:custom.tags}

    CloudFrontOriginAccessIdentity:
      Metadata:
        Comment: 'Access S3 bucket content only through CloudFront'
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'Access S3 bucket content only through CloudFront'
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'

    FileUpdatesQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.parameters.queues.fileUpdates.name}
        MessageRetentionPeriod: ${self:custom.parameters.queues.fileUpdates.messageRetentionPeriod}
        VisibilityTimeout: ${self:custom.parameters.queues.fileUpdates.visibilityTimeout}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt FileUpdatesQueueDLQ.Arn
          maxReceiveCount: ${self:custom.parameters.queues.fileUpdates.maxReceiveCount}
        Tags: ${self:custom.tags}

    FileUpdatesQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: ${self:custom.parameters.queues.fileUpdates.dlqMessageRetentionPeriod}
        QueueName: ${self:custom.parameters.queues.fileUpdates.dlqName}
        Tags: ${self:custom.tags}

    FileUpdatesQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: "*"
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - ${self:custom.parameters.storageBucket.name} # predefined bucket name allows to get rid of the circular dependency bucket <> policy
        Queues:
          - !Ref FileUpdatesQueue

  Outputs:
    StorageBucketName:
      Description: 'Bucket name'
      Value: !Ref StorageBucket
    CloudFrontDistributionId:
      Description: 'Id for the CloudFront distribution'
      Value: !Ref CloudFrontDistribution
    CloudFrontDistributionDomainName:
      Description: 'Domain name for the CloudFront distribution'
      Value: !GetAtt CloudFrontDistribution.DomainName

custom:
  stage: ${opt:stage, env:STAGE, self:provider.stage}
  envSpecificParams: ${file(envs.yaml):${self:custom.stage}}
  region: ${opt:region, self:provider.region}
  layersDeploymentBucket: ${opt:layersBucket, "stokado-layers-${self:custom.stage}"} # this bucket must exist BEFORE deploying the stack, can be one for many stacks per AWS account
  tags:
    - Key: app
      Value: ${self:service}
    - Key: environment
      Value: ${self:custom.stage}
  parameters:
    authorize:
      memorySize: 256
      timeout: 5
      authorizationExpiresIn: 300000 # 5 minutes
    flush:
      memorySize: 256
      timeout: 5
      batchSize: 1000
      batchingWindow: 30
      expectedMaxAverageDuration: 2000 # 2 seconds
    cdn:
      cacheDefaultTtl: 86400 # 1 day
      cacheMinTtl: 86400 # 1 day
      cacheMaxTtl: 31536000 # 1 year
    queues:
      fileUpdates:
        name: FileUpdatesQueue-${self:custom.stage}-${self:custom.region}
        dlqName: FileUpdatesQueueDLQ-${self:custom.stage}-${self:custom.region}
        visibilityTimeout: 30 # this should be always greater than the flush function timeout
        maxReceiveCount: 5
        messageRetentionPeriod: 14400 # 4 hours
        dlqMessageRetentionPeriod: 345600 # 4 days
    storageBucket:
      name: ${self:service}-storage-${self:custom.stage}
    monitoring:
      apiKey: ${opt:monitoringApiKey, 'api-key-missing'}
      endpoint: https://alert.victorops.com/integrations/cloudwatch/20131130/alert/${self:custom.parameters.monitoring.apiKey}/Web
  webpack:
    includeModules: false
  serverless-layers:
    functions:
      - authorize
      - flush
    dependenciesPath: ./package.json
    packageManager: yarn
    layersDeploymentBucket: ${self:custom.layersDeploymentBucket}
  # SQS alarms depend on the SNS topics created in the alerts section below
  # please note that they are created only for some environments (stages)
  # for other environments, the SQS alarms will be created but will not trigger
  # actual alarms
  sqs-alarms:
    - queue: ${self:custom.parameters.queues.fileUpdates.name}
      topic: ${self:service}-${self:custom.stage}-alerts-alarm
      name: ${self:service}-${self:custom.stage}-high-number-of-messages-alarm
      thresholds:
        - 100
    - queue: ${self:custom.parameters.queues.fileUpdates.dlqName}
      topic: ${self:service}-${self:custom.stage}-alerts-alarm
      name: ${self:service}-${self:custom.stage}-high-number-of-dlq-messages-alarm
      thresholds:
        - 1
  alerts:
    stages:
      - rc1
      - baklava
      - alfajores
      - dev
    dashboards: true
    nameTemplate: $[functionName]-$[metricName]-alarm
    prefixTemplate: $[stackName]
    topics:
      ok:
        topic: ${self:service}-${self:custom.stage}-alerts-ok
        notifications:
        - protocol: https
          endpoint: ${self:custom.parameters.monitoring.endpoint}
      alarm:
        topic: ${self:service}-${self:custom.stage}-alerts-alarm
        notifications:
        - protocol: https
          endpoint: ${self:custom.parameters.monitoring.endpoint}
      insufficientData:
        topic: ${self:service}-${self:custom.stage}-alerts-insufficientData
        notifications:
        - protocol: https
          endpoint: ${self:custom.parameters.monitoring.endpoint}
    definitions:
      functionErrors:
        period: 300
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration
  customDomains:
    enabled: ${self:custom.envSpecificParams.withCustomDomain}
    certificateName: "*.${self:custom.envSpecificParams.baseHostname}"
    domainName: "${self:custom.stage}-${self:service}.${self:custom.envSpecificParams.baseHostname}"
    basePath: 'api'
    stage: ${self:custom.stage}
    createRoute53Record: ${self:custom.envSpecificParams.createRoute53Record}
